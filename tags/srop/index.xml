<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SROP on Rog3rSm1th</title>
    <link>https://Rog3rSm1th.github.io/tags/srop/</link>
    <description>Recent content in SROP on Rog3rSm1th</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 10 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://Rog3rSm1th.github.io/tags/srop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploit a binary with SigReturn Oriented Programming (SROP)</title>
      <link>https://Rog3rSm1th.github.io/posts/sigreturn-oriented-programming/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Rog3rSm1th.github.io/posts/sigreturn-oriented-programming/</guid>
      <description>I wrote this article in order to synthesize the different methods I have encountered to exploit a binary with SROP, it is also a preparatory work for the development of a tool allowing to automatically search in a binary the elements useful to the creation of a SROP exploit.
 Since its first presentation at the 35th Security and Privacy IEEE conference in 2014, the SROP method has been the subject of several papers, as well as numerous CTF challenges, however, it remains difficult to find a comprehensive paper on this topic, so this will be the focus of this article.</description>
    </item>
    
  </channel>
</rss>
